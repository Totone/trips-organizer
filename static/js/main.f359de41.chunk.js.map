{"version":3,"sources":["_config/locales/i18n.ts","_config/constants.ts","components/atoms/LoadingIcon.tsx","components/atoms/Stop.tsx","_config/env.ts","_config/trips-api.ts","services/trips_api/xhr.ts","services/trips_api/fetchBusStops.ts","services/trips_api/fetchTrips.ts","services/trips_api/index.ts","services/trips_api/bookTrip.ts","services/trips_api/cancelBookedTrip.ts","services/store/slices/stopSlice/stopSlice.ts","services/store/slices/tripSlice/tripSlice.ts","services/store/slices/bookSlice/bookSlice.ts","services/store/reducer.ts","services/store/hooks.ts","services/store/index.ts","components/molecules/StopSelector.tsx","hooks/useClasses.ts","components/atoms/Text.tsx","services/date-handler/createDateFromString.ts","services/date-handler/parseDate.ts","components/atoms/BookedTripLine.tsx","utils/isTripBooked.ts","components/atoms/Button.tsx","utils/sortList.ts","components/molecules/BookedTrip.tsx","components/organisms/BookedList.tsx","components/molecules/LayoutWhenEmptyList.tsx","components/atoms/DaysDiffIndicator.tsx","services/date-handler/getDiffInDays.ts","services/date-handler/index.ts","components/atoms/TripDataItem.tsx","hooks/useBool.ts","components/molecules/GroupedTd.tsx","components/molecules/TripData.tsx","components/organisms/Trips.tsx","components/organisms/ButtonsRibbon.tsx","components/templates/PageLayout.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["resources","fr","localesFR","i18n","use","initReactI18next","init","ns","defaultNS","fallbackLng","debug","process","returnObjects","interpolation","escapeValue","CSTS","SELECT_DEFAULT_VALUE","ARROW","REQ_STATUS","LOADING","IDLE","FAILED","IDS","BOOKED_TRIPS","LoadingIcon","icon","Container","className","Spinner","role","animation","variant","Stop","label","value","dotenv","config","TRIPS_API_ENDPOINTS","BASE_URL","FETCH_STOPS","method","uri","FETCH_TRIPS","BOOK_TRIP","CANCEL_BOOK","axiosInstance","axios","create","baseURL","timeout","xhr","fetchBusStops","get","fetchTrips","params","bookTrip","tripId","put","cancelBookedTrip","delete","Promise","resolve","reject","then","apiResponse","data","catch","departureStop","tripsApi","success","setTimeout","fetchStopsList","createAsyncThunk","a","response","stopSlice","createSlice","name","initialState","status","list","cached","current","reducers","reset","state","update","action","payload","cache","extraReducers","builder","addCase","pending","rejected","fulfilled","actions","resetStop","updateStop","updateCachedStops","stopSelectors","stop","fetchTripsList","tripSlice","concat","resetTrips","updateTrips","tripSelectors","trip","ACTION_TYPES","thunkApi","getState","book","find","b","id","api","bookSlice","cancel","push","filter","booked","bookSelectors","reducer","stopReducer","tripReducer","useStore","useAppSelector","useSelector","dispatch","useDispatch","currentStop","cachedStops","stopsList","stopReqStatus","tripsList","cachedTrips","tripReqStatus","bookReqStatus","unbookReqStatus","bookedList","handleTripsUpdate","useCallback","input","Array","isArray","includes","newTripsList","newStop","from","store","configureStore","StopSelector","t","useTranslation","useEffect","length","Col","FloatingLabel","Form","Select","onChange","e","preventDefault","target","map","stopName","defaultValue","useClasses","conditions","useState","strClasses","setStrClasses","flat","rule","join","Text","undefined","centered","right","bold","italic","xs","sm","md","lg","xl","xxl","green","red","blue","teal","yellow","styles","children","classes","style","createDateFromString","output","dates","forEach","strDate","date","Date","isNaN","getTime","Error","parseDate","withoutHours","withoutDate","normalizeDate","n","parsed","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","BookedTripLine","time","isDateLine","Row","isTripBooked","some","Button","unbook","resetCache","fetchAll","sortTable","sortBy","onClick","sort","localeCompare","arrivalStop","departureTime","sortList","disabled","title","width","BookedTrip","ListGroup","Item","fluid","arrivalTime","BookedList","order","LayoutWhenEmptyList","fontSize","DaysDiffIndicator","color","getDiffInDays","strDate1","strDate2","date1","date2","setHours","setMinutes","setSeconds","setMilliseconds","diffInMs","Math","abs","trunc","TripDataItem","type","diff","setOutput","initial","setValue","useBool","withDaysDiff","toggle","count","GroupedTd","departure","arrival","isStopsGroup","as","TripData","span","Trips","Table","hover","size","ButtonsRibbon","height","PageLayout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.f359de41.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\nimport * as localesFR from \"./fr\"\n\nexport const resources = {\n    fr: { ...localesFR },\n}\nexport const defaultNS = \"common\"\n\ni18n.use(initReactI18next).init({\n    resources,\n    ns: [ \"common\", \"errors\" ],\n    defaultNS,\n\n    fallbackLng: \"fr\",\n    debug: process.env.NODE_ENV === \"development\",\n    returnObjects: true,\n    interpolation: {\n        escapeValue: false,\n    },\n})\n\nexport default i18n","const CSTS = {\n    SELECT_DEFAULT_VALUE: \"default\",\n    ARROW: \" ⇒ \",\n    REQ_STATUS: {\n        LOADING: \"loading\",\n        IDLE: \"idle\",\n        FAILED: \"failed\",\n    },\n    IDS: {\n        BOOKED_TRIPS: \"bookedTrips\",\n    }\n}\n\nexport default CSTS","import { FC, ReactElement } from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport Spinner from \"react-bootstrap/Spinner\"\n\ninterface LoadingIconProps {\n    icon?: \"border\"|\"grow\"\n}\n/** Displays a loading icon */\nexport const LoadingIcon: FC<LoadingIconProps> = ({\n    icon = \"border\",\n}): ReactElement => (\n    <Container className=\"w-100 text-center\">\n        <Spinner \n            role=\"status\" \n            animation={icon} \n            variant={icon === \"border\"? \"primary\":\"primary\"}\n        >\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </Container>\n)","import { FC, ReactElement } from \"react\"\nimport { Stop as StopType } from \"../../types\"\n\ninterface StopProps {\n    label: StopType\n    value: string\n}\n\n/** Represents a bus stop */\nexport const Stop: FC<StopProps> = ({ label, value }): ReactElement => (\n    <option value={label}>\n        { value }\n    </option>\n)","import dotenv from \"dotenv\"\ndotenv.config()\n\nexport const TRIPS_API_BASE_URL: string = process.env.REACT_APP_API_BASE_URL || \"\"","import { TRIPS_API_BASE_URL } from \"./env\"\n\nexport const TRIPS_API_ENDPOINTS = {\n    BASE_URL: TRIPS_API_BASE_URL,\n    FETCH_STOPS: {\n        method: \"get\",\n        uri: \"/stops\"\n    },\n    FETCH_TRIPS: {\n        method: \"get\",\n        uri: \"/trips\"\n    },\n    BOOK_TRIP: {\n        method: \"put\",\n        uri: \"/book\"\n    },\n    CANCEL_BOOK: {\n        method: \"delete\",\n        uri: \"/book\"\n    },\n}","import axios, { AxiosInstance, AxiosRequestConfig } from \"axios\"\nimport { TRIPS_API_ENDPOINTS } from \"../../_config/trips-api\"\n\nexport const axiosInstance: AxiosInstance = axios.create({\n    baseURL: TRIPS_API_ENDPOINTS.BASE_URL,\n    timeout: 10000\n})\n\nconst fetchBusStops = () => axiosInstance.get(\n    TRIPS_API_ENDPOINTS.FETCH_STOPS.uri,\n)\n\nconst fetchTrips = (params: AxiosRequestConfig = {}) => axiosInstance.get(\n    TRIPS_API_ENDPOINTS.FETCH_TRIPS.uri,\n    params\n)\n\nconst bookTrip = (tripId: number) => axiosInstance.put(\n    TRIPS_API_ENDPOINTS.BOOK_TRIP.uri + \"/\" + tripId\n)\n\nconst cancelBookedTrip = (tripId: number) => axiosInstance.delete(\n    TRIPS_API_ENDPOINTS.CANCEL_BOOK.uri + \"/\" + tripId\n)\n\nconst xhr = {\n    fetchBusStops,\n    fetchTrips,\n    bookTrip,\n    cancelBookedTrip,\n}\n\nexport default xhr","import xhr from \"./xhr\"\nimport { Stop } from \"../../types\"\n/**\n * Fetches the list of available bus stops\n * @returns The lis of all bus stops\n */\nexport const fetchBusStops = (): Promise<{data: Stop[]}> => new Promise(\n    (resolve, reject) => {\n        xhr.fetchBusStops()\n        .then(\n            (apiResponse) => resolve({ data: apiResponse.data })\n        )\n        .catch(reject)\n    }\n)","import xhr from \"./xhr\"\nimport { Stop, Trip } from \"../../types\"\n\ninterface FetchTripsParams { departureStop?: string }\n\n/**\n * Fetches the list for available trips starting from `departureStop`  \n * If `departureStop` is an empty string, fetches all available trips\n * @param departureStop Bus stop where trip starts\n * @returns The list of available trips\n */\nexport const fetchTrips = (\n    departureStop: Stop = \"\"\n): Promise<{data: Trip[]}> => new Promise(\n    (resolve, reject) => {\n        const params: FetchTripsParams = {}\n        if (departureStop !== \"\") params.departureStop = departureStop\n\n        xhr.fetchTrips({ params })\n        .then(\n            apiResponse => resolve({ data: apiResponse.data })\n        )\n        .catch(reject)\n    }\n)","import { fetchBusStops } from \"./fetchBusStops\";\nimport { bookTrip } from \"./bookTrip\";\nimport { fetchTrips } from \"./fetchTrips\";\nimport { cancelBookedTrip } from \"./cancelBookedTrip\";\n\nexport { fetchBusStops }\nexport { bookTrip }\nexport { fetchTrips }\nexport { cancelBookedTrip }\n\nconst tripsApi = {\n    fetchBusStops,\n    bookTrip,\n    fetchTrips,\n    cancelBookedTrip,\n}\n\nexport default tripsApi","import xhr from \"./xhr\"\n\n/**\n * Books a trip depending on its ID\n * @param tripId Target id\n */\nexport const bookTrip = (tripId: number): Promise<void> => new Promise(\n    (resolve, reject) => {\n        xhr.bookTrip(tripId)\n        .then(\n            apiResponse => apiResponse.data.success ? resolve():reject()\n        )\n        .catch(reject)\n    }\n)","// import xhr from \"./xhr\"\n\n/**\n * Cancels a previously booked trip\n * @param tripId Target id\n */\nexport const cancelBookedTrip = (tripId: number): Promise<void> => new Promise(\n    (resolve, reject) => {\n        /* \n        xhr.cancelBookedTrip(tripId)\n        .then(\n            (apiResponse) => {\n                //* Resolves if apiResponse is correct or rejects\n                if (true) resolve()\n                else reject()\n            }\n        )\n        .catch(reject)\n        */\n        setTimeout(resolve, 1000)\n    }\n)","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { RootState, AsyncStatus } from \"../../types\"\nimport { fetchBusStops } from \"../../../../services/trips_api\"\nimport { Stop } from \"../../../../types\"\nimport CSTS from \"../../../../_config/constants\"\n\nconst SLICE_NAME = \"stop\"\nconst ACTION_TYPES = {\n    FETCH_STOPS_LIST: \"stop/fetchStopsList\",\n}\n\nexport interface StopState {\n    status: AsyncStatus\n    list: Stop[]\n    cached: Stop[]\n    current: Stop\n}\n\nexport const initialState: StopState = {\n    status: \"idle\",\n    list: [],\n    cached: [],\n    current: \"default\",\n}\n\n/** Fetches stops list from API */\nexport const fetchStopsList = createAsyncThunk(\n    ACTION_TYPES.FETCH_STOPS_LIST,\n    async () => {\n        const response = await fetchBusStops()\n        return response.data\n    }\n)\n\nexport const stopSlice = createSlice({\n    name: SLICE_NAME,\n    initialState,\n    reducers: {\n        /** Resets the current selected stop & cached ones */\n        reset: (state) => {\n            state.current = CSTS.SELECT_DEFAULT_VALUE\n            state.cached = []\n        },\n        /** Updates the current selected stop */\n        update: (state, action: PayloadAction<Stop>) => {\n            state.current = action.payload\n        },\n        /** Updates cached stops list */\n        cache: (state, action: PayloadAction<Stop[]>) => {\n            state.cached = action.payload\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n        .addCase(\n            fetchStopsList.pending,\n            (state) => { \n                state.status = \"loading\" \n            }\n        )\n        .addCase(\n            fetchStopsList.rejected,\n            (state) => { \n                state.status = \"failed\" \n            }\n        )\n        .addCase(\n            fetchStopsList.fulfilled,\n            (state, action) => { \n                state.status = \"idle\"\n                state.list = action.payload\n            }\n        )\n    }\n})\n\nexport const {\n    reset: resetStop, \n    update: updateStop,\n    cache: updateCachedStops,\n} = stopSlice.actions\n\nexport const stopSelectors = {\n    cachedStops: (state: RootState) => state.stop.cached,\n    currentStop: (state: RootState) => state.stop.current,\n    stopsList: (state: RootState) => state.stop.list,\n    stopReqStatus: (state: RootState) => state.stop.status,\n}\n\nexport default stopSlice.reducer","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { RootState, AsyncStatus } from \"../../types\"\nimport type { Stop, Trip } from \"../../../../types\"\nimport { fetchTrips } from \"../../../../services/trips_api\"\n\nconst SLICE_NAME = \"trip\"\nconst ACTION_TYPES = {\n    FETCH_TRIPS_LIST: \"trip/fetchTripsList\",\n}\n\nexport interface TripState {\n    status: AsyncStatus\n    list: Trip[]\n    cached: Trip[]\n}\n\nexport const initialState: TripState = {\n    status: \"idle\",\n    list: [],\n    cached: [],\n};\n\n/** Fetches available trips list depending on given departure stop */\nexport const fetchTripsList = createAsyncThunk(\n    ACTION_TYPES.FETCH_TRIPS_LIST,\n    async (departureStop: Stop) => {\n        const response = await fetchTrips(departureStop)\n        return response.data\n    }\n)\n\nexport const tripSlice = createSlice({\n    name: SLICE_NAME,\n    initialState,\n    reducers: {\n        /** Resets cached & displayed lists */\n        reset: (state) => {\n            state.cached = []\n            state.list = []\n        },\n        /** Updates displayed list using cached data */\n        update: (state, action: PayloadAction<Trip[]>) => {\n            state.list = action.payload\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(\n            fetchTripsList.pending,\n            (state) => { state.status = \"loading\" }\n        ).addCase(\n            fetchTripsList.rejected,\n            (state) => { state.status = \"failed\" }\n        ).addCase(\n            fetchTripsList.fulfilled,\n            (state, action) => { \n                state.status = \"idle\"\n                state.list = action.payload\n                state.cached = state.cached.concat(action.payload)\n            }\n        )\n    }\n})\n\nexport const { \n    reset: resetTrips, \n    update: updateTrips, \n} = tripSlice.actions\n\nexport const tripSelectors = {\n    cachedTrips: (state: RootState) => state.trip.cached,\n    tripsList: (state: RootState) => state.trip.list,\n    tripReqStatus: (state: RootState) => state.trip.status,\n}\n\nexport default tripSlice.reducer","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport api from \"../../../../services/trips_api\"\nimport { RootState, AsyncStatus } from \"../../types\"\nimport { Trip } from \"../../../../types\"\n\nconst SLICE_NAME = \"book\"\nconst ACTION_TYPES = {\n    BOOK_TRIP: \"book/bookTrip\",\n    CANCEL_BOOK_TRIP: \"book/cancelBookedTrip\",\n}\n\nexport interface BookState {\n    status: {\n        book: AsyncStatus\n        cancel: AsyncStatus\n    }\n    list: Trip[]\n}\n\nexport const initialState: BookState = {\n    status: {\n        book: \"idle\",\n        cancel: \"idle\"\n    },\n    list: [],\n};\n\n/** Books a trip according to its id */\nexport const bookTrip = createAsyncThunk(\n    ACTION_TYPES.BOOK_TRIP,\n    async (trip: Trip, thunkApi) => {\n        const state = thunkApi.getState() as RootState\n        if (!state.book.list.find(b => b.id === trip.id)) {\n            await api.bookTrip(trip.id)\n            return trip\n        }\n    }\n)\n\n/** Cancels a booked trip */\nexport const cancelBookedTrip = createAsyncThunk(\n    ACTION_TYPES.CANCEL_BOOK_TRIP,\n    async (tripId: Trip[\"id\"]) => { \n        await api.cancelBookedTrip(tripId)\n        return tripId\n    }\n)\n\nexport const bookSlice = createSlice({\n    name: SLICE_NAME,\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n        .addCase(\n            bookTrip.pending,\n            (state) => { state.status.book = \"loading\" }\n        )\n        .addCase(\n            bookTrip.rejected,\n            (state) => { state.status.book = \"failed\" }\n        )\n        .addCase(\n            bookTrip.fulfilled,\n            (state, action) => { \n                state.status.book = \"idle\" \n                action.payload && state.list.push(action.payload)\n            }\n        )\n        .addCase(\n            cancelBookedTrip.pending,\n            (state) => { state.status.cancel = \"loading\" }\n        )\n        .addCase(\n            cancelBookedTrip.rejected,\n            (state) => { state.status.cancel = \"failed\" }\n        )\n        .addCase(\n            cancelBookedTrip.fulfilled,\n            (state, action) => { \n                state.status.cancel = \"idle\"\n                state.list = state.list.filter(\n                    booked => booked.id !== action.payload\n                )\n            }\n        )\n    }\n})\n\nexport const bookSelectors = {\n    bookedList: (state: RootState) => state.book.list,\n    bookReqStatus: (state: RootState) => state.book.status.book,\n    unbookReqStatus: (state: RootState) => state.book.status.cancel,\n}\n\nexport default bookSlice.reducer","import stopReducer from \"./slices/stopSlice\"\nimport tripReducer from \"./slices/tripSlice\"\nimport bookReducer from \"./slices/bookSlice\"\n\nexport const reducer = {\n    book: bookReducer,\n    stop: stopReducer,\n    trip: tripReducer,\n}","import { useCallback } from \"react\"\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\"\nimport type { RootState, AppDispatch } from \"./types\"\nimport type { Stop, Trip } from \"../../types\"\n\nimport {\n    resetStop,\n    updateStop,\n    stopSelectors,\n    fetchStopsList,\n    updateCachedStops,\n} from \"./slices/stopSlice\"\n\nimport {\n    resetTrips,\n    updateTrips,\n    tripSelectors,\n    fetchTripsList,\n} from \"./slices/tripSlice\"\n\nimport {\n    bookTrip,\n    bookSelectors,\n    cancelBookedTrip,\n} from \"./slices/bookSlice\"\n\n\nexport const useStore = () => {\n    const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n    const useAppDispatch = () => useDispatch<AppDispatch>()\n    const dispatch = useAppDispatch()\n    \n    /** Current selected stop */\n    const currentStop = useAppSelector(stopSelectors.currentStop)\n    /** List containing all trips starting from already requested stops */\n    const cachedStops = useAppSelector(stopSelectors.cachedStops)\n    /** List of all avalable stops */\n    const stopsList = useAppSelector(stopSelectors.stopsList)\n    /** Status for stop resquest status */\n    const stopReqStatus = useAppSelector(stopSelectors.stopReqStatus)\n\n    /** List of all available trips starting from selected stop */\n    const tripsList = useAppSelector(tripSelectors.tripsList)\n    /** List containing all trips already requested */\n    const cachedTrips = useAppSelector(tripSelectors.cachedTrips)\n\n    /** Status for trip request status */\n    const tripReqStatus = useAppSelector(tripSelectors.tripReqStatus)\n\n    /** Status for trip book request status */\n    const bookReqStatus = useAppSelector(bookSelectors.bookReqStatus)\n    /** Status for trip book cancellation request status */\n    const unbookReqStatus = useAppSelector(bookSelectors.unbookReqStatus)\n    /** List of booked trips */\n    const bookedList = useAppSelector(bookSelectors.bookedList)\n\n    const handleTripsUpdate = useCallback(\n        (input: Stop|Trip[] = \"\") => {\n            if(Array.isArray(input)) {\n                dispatch(updateTrips(input))\n            }\n            else {\n                const departureStop = input\n                if(cachedStops.includes(departureStop)) {\n                    const newTripsList = cachedTrips.filter(\n                        trip => trip.departureStop === departureStop\n                    )\n                    dispatch(updateTrips(newTripsList))\n                }\n                else {\n                    dispatch(fetchTripsList(departureStop))\n                    if(input !== \"\")\n                        dispatch(updateCachedStops(cachedStops.concat(departureStop)))\n                    else {\n                        dispatch(updateCachedStops(stopsList))\n                    }\n                }\n            }\n        }, [cachedStops, cachedTrips, dispatch, stopsList]\n    )\n\n    return {\n        currentStop,\n        stopsList,\n        stopReqStatus,\n        tripsList,\n        tripReqStatus,\n        bookedList,\n        bookReqStatus,\n        unbookReqStatus,\n\n        resetStop: () => dispatch(resetStop()),\n        updateStop: (newStop: Stop) => dispatch(updateStop(newStop)),\n        resetTrips: () => dispatch(resetTrips()),\n        updateTrips: handleTripsUpdate,\n        fetchStopsList: () => dispatch(fetchStopsList()),\n        fetchTripsList: (from: Stop) => dispatch(fetchTripsList(from)),\n        bookTrip: (trip: Trip) => dispatch(bookTrip(trip)),\n        cancelBookedTrip: (tripId: Trip[\"id\"]) => dispatch(cancelBookedTrip(tripId)),\n    }\n}","import { configureStore } from \"@reduxjs/toolkit\"\nimport { reducer } from \"./reducer\"\nexport { useStore } from \"./hooks\"\n\nexport const store = configureStore({ reducer })","import { ChangeEventHandler, FC, ReactElement, useEffect } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Form from \"react-bootstrap/Form\"\nimport Col from \"react-bootstrap/Col\"\nimport FloatingLabel from \"react-bootstrap/FloatingLabel\"\n\nimport CSTS from \"../../_config/constants\"\nimport { LoadingIcon } from \"../atoms/LoadingIcon\"\nimport { Stop } from \"../atoms/Stop\"\nimport { useStore } from \"../../services/store\"\n\n/** Displays the UI component used to choose a bus stop */\nexport const StopSelector: FC = (): ReactElement => {\n    const { t } = useTranslation()\n    const { \n        currentStop, \n        stopsList,\n        updateStop,\n        fetchStopsList, \n        stopReqStatus, \n    } = useStore()\n\n    useEffect(\n        () => {\n            if(stopsList.length === 0) fetchStopsList()\n        }, [fetchStopsList, stopsList.length]\n    )\n    const handleSelectChange: ChangeEventHandler<HTMLSelectElement> = (e) => {\n        e.preventDefault()\n        updateStop(e.target.value)\n    } \n\n    return (\n        <Col className=\"flex-grow-0\">\n            {\n                stopReqStatus === CSTS.REQ_STATUS.FAILED ? (\n                    <div>{t(\"errors:request.stop\")}</div>\n                ): \n                stopReqStatus === CSTS.REQ_STATUS.LOADING ? (\n                    <LoadingIcon icon=\"grow\" />\n                ) : (\n                    <FloatingLabel label={t(\"From where\")} >\n                        <Form.Select onChange={handleSelectChange} value={currentStop}>\n                            {\n                                [CSTS.SELECT_DEFAULT_VALUE].concat(stopsList).map(\n                                    stopName => (\n                                        <Stop \n                                            key={stopName} \n                                            label={stopName}\n                                            value={stopName  === CSTS.SELECT_DEFAULT_VALUE ? t(\"Choose bus stop\"): stopName}\n                                        />\n                                    )\n                                )\n                            }\n                        </Form.Select>\n                    </FloatingLabel>\n                )\n            }\n        </Col>\n    )\n}","import { useState, useEffect } from \"react\"\n\ntype Conditions = Array<string|boolean|Array<string|boolean>>\n\nexport const defaultValue = []\n\n/** \n * Custom hook which creates a string for a \n * component className depending on given conditions\n * @param conditions list of classNames or `false` - only strings \n * are used to compute the className string\n */\nexport const useClasses = (conditions: Conditions = defaultValue): string => {\n    const [strClasses, setStrClasses] = useState<string>(\"\")\n    useEffect(\n        () => {\n            setStrClasses(\n                conditions.flat().filter(\n                    rule => typeof rule !== \"boolean\"\n                ).join(\" \")\n            )\n        }, [conditions]\n    )\n    return strClasses\n}","import { CSSProperties, FC, ReactElement } from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport { useClasses } from \"../../hooks\"\n\ninterface TextProps {\n    centered?: boolean\n    right?: boolean\n    bold?: boolean\n    italic?: boolean\n    xs?: boolean\n    sm?: boolean\n    md?: boolean\n    lg?: boolean\n    xl?: boolean\n    xxl?: boolean\n    id?: string\n    green?: boolean\n    red?: boolean\n    blue?: boolean\n    teal?: boolean\n    yellow?: boolean\n    styles?: CSSProperties\n}\n\n/** Displays a text */\nexport const Text: FC<TextProps> = ({\n    id = undefined,\n    centered = false,\n    right = false,\n    bold = false,\n    italic = false,\n    xs = false,\n    sm = false,\n    md = false,\n    lg = false,\n    xl = false,\n    xxl = false,\n    green = false,\n    red = false,\n    blue = false,\n    teal = false,\n    yellow = false,\n    styles = undefined,\n    children,\n}): ReactElement => {\n    const classes = useClasses([\n        \"w-100\",\n        \"mt-5\",\n\n        centered && \"text-center\",\n        right && \"text-end\",\n        bold && \"fw-bold\",\n        italic && \"fst-italic\",\n        \n        xxl && \"fs-1\",\n        xl && \"fs-2\",\n        lg && \"fs-3\",\n        md && \"fs-4\",\n        sm && \"fs-5\",\n        xs && \"fs-6\",\n        \n        green && \"text-success\",\n        red && \"text-danger\",\n        blue && \"text-primary\",\n        teal && \"text-info\",\n        yellow && \"text-warning\",\n    ])\n    \n    return (\n        <Container className={classes}>\n            <p id={id} style={styles}>{ children }</p>\n        </Container>\n    )\n}","/** \n * Creates & validates a date from a given string\n * Throws an exception if string is not valid date\n * @param dates List of string dates\n */\nexport function createDateFromString(...dates: string[]): Date|Array<Date> {\n    const output: Date[] = []\n    dates.forEach(\n        strDate => {\n            const date = new Date(strDate)\n            if (isNaN(date.getTime()))\n                throw new Error(\"Invalid string dates given: \" + strDate)\n            else output.push(date)\n        }\n    )\n    return output.length === 1 ? output[0] : output\n}","import { createDateFromString } from \"./createDateFromString\"\n\n/**\n * Parse a date from Date object to a string corresponding to the date\n * @param strDate Targeted date\n * @param withoutHours `true` to not display hours\n * @param withoutDate `true` to not display date\n * @returns A string representing the datetime\n */\nexport function parseDate(\n    strDate: string, \n    withoutHours: boolean = false, \n    withoutDate: boolean = false\n): string {\n    const date = createDateFromString(strDate) as Date\n    const normalizeDate =(n: number) => n < 10 ? \"0\" + n : n\n    let parsed: string = \"\"\n\n    if (!withoutDate) {\n        const day = normalizeDate(date.getDate())\n        const month = normalizeDate(date.getMonth() + 1)\n        const year = date.getFullYear()\n        parsed += `${day}/${month}/${year} `\n    }\n\n    if (!withoutHours) {\n        const hour = normalizeDate(date.getHours())\n        const minute = normalizeDate(date.getMinutes())\n        parsed += `${hour}:${minute}`\n    }\n\n    return parsed\n}","import { FC, ReactElement, Fragment } from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nimport { parseDate } from \"../../services/date-handler/parseDate\"\n\ninterface BookedTripLineProps {\n    stop?: string\n    time: string\n    isDateLine?: boolean\n    isArrival?: boolean\n}\n\nexport const BookedTripLine: FC<BookedTripLineProps> = ({\n    time,\n    stop = undefined,\n    isDateLine = false,\n}): ReactElement => (\n    <Row className=\"d-flex justify-content-start\">\n        {\n            isDateLine ? <Col>{parseDate(time, true)}</Col> : (\n                <Fragment>\n                    <Col className=\"col-3 ps-4\">{parseDate(time, false, true)}</Col>\n                    <Col>{stop}</Col>\n                </Fragment>\n            )\n        }\n    </Row>\n)","import { Trip } from \"../types\";\n\n/** Checks if a trip is in the list of booked ones */\nexport const isTripBooked = (\n    tripId: number, \n    bookedList: Trip[]\n): boolean => bookedList.some(trip => trip.id === tripId)","import { FC, ReactElement } from \"react\"\nimport {useTranslation} from \"react-i18next\"\nimport BootstrapButton from \"react-bootstrap/Button\"\n\nimport { useClasses } from \"../../hooks\"\nimport { useStore } from \"../../services/store\"\nimport { Trip, SortBy } from \"../../types\"\nimport { sortList, isTripBooked } from \"../../utils\"\n\ninterface ButtonProps {\n    trip?: Trip\n    book?: boolean\n    unbook?: boolean\n    resetCache?: boolean\n    sortTable?: boolean\n    fetchAll?: boolean\n    sortBy?: SortBy\n}\n\n/** Displays a button to book a trip, cancel a booked one or sort a list */\nexport const Button: FC<ButtonProps> = ({\n    trip = undefined,\n    book = false,\n    unbook = false,\n    resetCache = false,\n    fetchAll = false,\n    sortTable = false,\n    sortBy = undefined\n}): ReactElement => {\n    const { t } = useTranslation()\n    const { \n        tripsList,\n        bookedList,\n        bookTrip,\n        bookReqStatus,\n        cancelBookedTrip,\n        resetTrips,\n        updateTrips,\n        resetStop\n    } = useStore()\n\n    const classes = useClasses([\n        (book || unbook) &&\"w-100\",\n        \"h-100\",\n        \"text-center\",\n        \"p-0\",\n        unbook && [\"fs-4\", \"fw-bold\"],\n        (sortTable || resetCache || fetchAll) && [\n            \"fs-1\",\n            \"py-auto\",\n        ],\n    ])\n\n    const handleClick = () => {\n        if (book && bookReqStatus !== \"loading\") bookTrip(trip as Trip)\n        if (unbook) cancelBookedTrip((trip as Trip).id)\n        if (resetCache) {\n            resetTrips()\n            resetStop()\n        }\n        if (sortTable) updateTrips(sortList(tripsList, sortBy as SortBy))\n        if (fetchAll) {\n            resetStop()\n            resetTrips()\n            updateTrips()\n        }\n    }\n    \n    return (\n        <BootstrapButton \n            className={classes}\n            onClick={handleClick} \n            variant={\n                book ? \"outline-warning\" :\n                unbook ? \"outline-danger\":\n                \"outline-primary\"\n            }\n            disabled={ \n                book ? isTripBooked((trip as Trip).id, bookedList) : \n                false\n            }\n            title={\n                unbook ? t(\"Cancel book\") : \n                sortTable ? (\n                    sortBy === \"date\" ? t(\"Sort by time\"):t(\"Sort by stop\")\n                ) : \n                resetCache ? t(\"Clear cache\") :\n                fetchAll ? t(\"Fetch all trips\") :\n                \"\"\n            }\n            style={{width: (resetCache || sortTable || fetchAll) ? 75 :\"\"}}\n        >\n            { \n                book ? \"💾\" :\n                unbook ? \"✖\" :\n                resetCache ? \"🧹\" :\n                fetchAll ? \"📋\" :\n                sortTable ? sortBy === \"stop\" ? \"🚩\" : \"🕔\" :\n                \"---\"    \n            }\n        </BootstrapButton>\n    )\n}","import { Trip, SortBy } from \"../types\"\n\n/** Sorts a given list by stop or date */\nexport const sortList = (list: Trip[], sortBy: SortBy) => {\n    const newList = [...list]\n    const sortMethod = (a: Trip, b: Trip) => (\n        sortBy === \"stop\" ? (\n            a.departureStop.localeCompare(b.departureStop) || \n            a.arrivalStop.localeCompare(b.arrivalStop)\n        ) :\n        new Date(a.departureTime).getTime() - new Date(b.departureTime).getTime()\n    )\n    return newList.sort(sortMethod)\n}","import { FC, ReactElement } from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport Col from \"react-bootstrap/Col\"\n\nimport { BookedTripLine } from \"../atoms/BookedTripLine\"\nimport { Button } from \"../atoms/Button\"\nimport { WithTrip } from \"../../types\"\n\n/** Represents data for a booked trip */\nexport const BookedTrip: FC<WithTrip> = ({ trip }): ReactElement => (\n    <ListGroup.Item className=\"p-0 m-0\">\n        <Container fluid className=\"d-flex align-items-center ps-2 pe-0 m-0\">\n        <Col>\n            <BookedTripLine isDateLine time={trip.departureTime} />\n            <BookedTripLine stop={trip.departureStop} time={trip.departureTime} />\n            <BookedTripLine stop={trip.arrivalStop} time={trip.arrivalTime} />\n        </Col>\n        <Col xs={3} md={2} xl={1} className=\"y-100 py-0 m-2\">\n            <Button unbook trip={trip}/>\n        </Col>\n        </Container>\n    </ListGroup.Item>\n)","import { FC, ReactElement } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport ListGroup from \"react-bootstrap/ListGroup\"\nimport Col from \"react-bootstrap/Col\"\n\nimport CSTS from \"../../_config/constants\"\nimport { Text } from \"../atoms/Text\"\nimport { BookedTrip } from \"../molecules/BookedTrip\"\nimport { useStore } from \"../../services/store\"\n\n/** Displays the list of booked trips */\nexport const BookedList: FC = (): ReactElement => {\n    const { t } = useTranslation()\n    const { bookedList } = useStore()\n    return (\n        <Col\n            className=\"pb-5 flex-grow-0\"\n            xs={{order: \"first\"}} \n            md={{order: \"last\"}} \n        >\n            <Text id={CSTS.IDS.BOOKED_TRIPS} centered lg blue>\n                {t(\"Booked trips\")}\n            </Text>\n            {\n                bookedList.length === 0 ? (\n                    <Text centered sm italic red>\n                        {t(\"No booked trip\")}\n                    </Text>\n                ) : (\n                    <ListGroup aria-labelledby={CSTS.IDS.BOOKED_TRIPS}>\n                        {\n                            bookedList.map(\n                                (trip) => (\n                                    <BookedTrip key={trip.id} trip={trip}/>\n                                )\n                            )\n                        }\n                    </ListGroup>\n                )\n            }\n        </Col>\n    )\n}","import { FC, ReactElement } from \"react\"\nimport Col from \"react-bootstrap/Col\"\n\nimport { Text } from \"../atoms/Text\"\nimport { StopSelector } from \"../molecules/StopSelector\"\n\n/** Displays the view when trips list is empty */\nexport const LayoutWhenEmptyList: FC = ({\n    children\n}): ReactElement => (\n    <Col lg={5} className=\"m-auto\">\n        <Text centered styles={{fontSize: 250}}>🚏</Text>\n        <Text centered lg blue>\n            {children}\n        </Text>\n        <StopSelector />\n    </Col>\n)","import { FC, ReactElement } from \"react\"\n\n/** Indicates that arrival date is not the same date as departure */\nexport const DaysDiffIndicator: FC = ({ children }): ReactElement => (\n    <span \n        style={{color: \"#d6cd52\"}} \n        title={children as string}\n    >\n        +\n    </span>\n)","import { createDateFromString } from \"./createDateFromString\"\n\n/**\n * Get the difference in days between 2 dates  \n */\nexport function getDiffInDays(strDate1: string, strDate2: string): number {\n    const [date1, date2] = createDateFromString(strDate1, strDate2) as Date[]\n\n    // time set to 00:00:00 to compute only dates diff\n    [date1, date2].forEach(\n        date => {\n            date.setHours(0)\n            date.setMinutes(0)\n            date.setSeconds(0)\n            date.setMilliseconds(0)\n        }\n    )\n\n    const fromMsToDay: number = 1000 * 60 * 60 * 24;\n    const diffInMs = Math.abs(date2.getTime() - date1.getTime())\n    return Math.trunc(diffInMs/fromMsToDay)\n}","import { getDiffInDays } from \"./getDiffInDays\"\nimport { parseDate } from \"./parseDate\"\n\nexport { getDiffInDays }\nexport { parseDate }\n\nconst dateHandler = {\n    getDiffInDays,\n    parseDate,\n}\n\nexport default dateHandler","import { FC, ReactElement, useEffect, useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Col from \"react-bootstrap/Col\"\n\nimport { DaysDiffIndicator } from \"../atoms/DaysDiffIndicator\"\nimport { useBool, useClasses } from \"../../hooks\"\nimport { parseDate } from \"../../services/date-handler\"\nimport { TripDataItemType } from \"../../types\"\n\ninterface TripDataItemProps {\n    type: TripDataItemType\n    value: string\n    diff?: number\n}\n\n/** Represents a part of a trip dataset */\nexport const TripDataItem: FC<TripDataItemProps> = ({\n    type,\n    value,\n    diff = 0,\n}): ReactElement => {\n    const { t } = useTranslation()\n    const classes = useClasses([\n        [\"departureStop\"].includes(type) ? \"text-end\" :\n        [\"arrivalStop\"].includes(type) ? \"text-start\" :\n        \"text-center\",\n        type === \"arrow\" && [\"d-none\", \"d-xl-block\", \"col-xl-1\"]\n    ])\n    const [output, setOutput] = useState<string>(\"\")\n    const [withDaysDiff, toggle] = useBool(false)\n\n    useEffect(\n        () => {\n            setOutput(\n                (![\"arrivalTime\", \"departureTime\", \"date\"].includes(type)) ? value :\n                parseDate(value, type === \"date\", type !== \"date\")\n            )\n\n            if(type === \"arrivalTime\" && diff > 0) toggle()\n        }, [diff, toggle, type, value]\n    )\n    return (\n        <Col className={classes}>\n            { output } { withDaysDiff && (\n                <DaysDiffIndicator>\n                    {t(\"Arrival is day after\", { count: diff })}\n                </DaysDiffIndicator>\n            )}\n        </Col>\n    )\n}","import { useState } from \"react\"\n\ntype UseBool = [boolean, () => void]\nexport const defaultValue: boolean = false\n\nexport const useBool = (initial: boolean = defaultValue): UseBool => {\n    const [value, setValue] = useState<boolean>(initial)\n    const toggleValue = () => setValue(!value)\n\n    return [\n        value,\n        toggleValue,\n    ]\n}","import { FC, ReactElement } from \"react\"\nimport Col from \"react-bootstrap/Col\"\n\nimport CSTS from \"../../_config/constants\"\nimport { TripDataItem } from \"../atoms/TripDataItem\"\nimport { useClasses } from \"../../hooks\"\nimport { Stop } from \"../../types\"\n\ninterface GroupedTdProps {\n    departure: Stop|string\n    arrival: Stop|string\n    isStopsGroup?: boolean\n    xs: number\n    lg: number\n    xl?: number\n    diff?: number\n}\n\nexport const GroupedTd: FC<GroupedTdProps> = ({\n    departure, \n    arrival,\n    isStopsGroup = false,\n    xs,\n    lg,\n    xl = undefined,\n    diff = 0\n}): ReactElement => {\n    const classes = useClasses([\n        \"d-flex\",\n        \"flex-column\",\n        \"flex-xl-row\",\n        \"justify-content-around\",\n        `align-items-${isStopsGroup ? \"end\":\"center\"}`,\n        isStopsGroup && \"align-items-lg-center\"\n    ])\n\n    return (\n        <Col as=\"td\" className={classes} xs={xs} lg={lg} xl={xl||lg}>\n            <TripDataItem \n                type={isStopsGroup ? \"departureStop\":\"departureTime\"} \n                value={departure}\n            />\n            <TripDataItem \n                type=\"arrow\" \n                value={CSTS.ARROW}\n            />\n            <TripDataItem \n                type={isStopsGroup ? \"arrivalStop\":\"arrivalTime\"} \n                value={arrival}\n                diff={diff}\n            />\n        </Col>\n    )\n}","import { FC, ReactElement } from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nimport { Button } from \"../atoms/Button\"\nimport { TripDataItem } from \"../atoms/TripDataItem\"\nimport { GroupedTd } from \"../molecules/GroupedTd\"\nimport { getDiffInDays } from \"../../services/date-handler\"\nimport { WithTrip } from \"../../types\"\n\n/** Represents all data for an available trip */\nexport const TripData: FC<WithTrip> = ({ trip }): ReactElement => (\n    <Row as=\"tr\" className=\"d-flex flex-row flex-1 m-0 p-0\" >\n        <GroupedTd xs={5} lg={6}\n            departure={trip.departureStop}\n            arrival={trip.arrivalStop}\n            isStopsGroup\n        />\n        <Col \n            as=\"td\" \n            className=\"d-flex justify-content-center align-items-center\" \n            xs={{span: 3, order: \"first\"}} lg={{span: 1, order: 0}} xl={2}\n        >\n            <TripDataItem type=\"date\" value={trip.departureTime}/>\n        </Col>\n        <GroupedTd xs={2} lg={3} xl={3}\n            departure={trip.departureTime}\n            arrival={trip.arrivalTime}\n            diff={getDiffInDays(trip.departureTime, trip.arrivalTime)}\n        />\n        <Col as=\"td\" xs={2} xl={1} className=\"d-flex justify-content-center align-items-center\">\n            <Button book trip={trip}/>\n        </Col>\n    </Row>\n)","import { FC, ReactElement, useEffect } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport Col from \"react-bootstrap/Col\"\nimport Row from \"react-bootstrap/Row\"\nimport Table from \"react-bootstrap/Table\"\n\nimport { LoadingIcon } from \"../atoms/LoadingIcon\"\nimport { LayoutWhenEmptyList as EmptyList } from \"../molecules/LayoutWhenEmptyList\"\nimport { TripData } from \"../molecules/TripData\"\nimport { useStore } from \"../../services/store\"\n\n/** Displays the list of available trips */\nexport const Trips: FC = (): ReactElement => {\n    const { t } = useTranslation()\n    const { \n        updateTrips, \n        currentStop, \n        tripsList,\n        tripReqStatus,\n    } = useStore()\n    useEffect(\n        () => {\n            if(currentStop !== \"default\") {\n                updateTrips(currentStop)\n            }\n        }, [currentStop, updateTrips]\n    )\n    return (\n        tripReqStatus === \"loading\" ? <LoadingIcon/> : \n        tripsList.length === 0 ? <EmptyList>{t(\"From where\")}</EmptyList> : (\n            <Table hover size=\"xl\">\n                <thead>\n                    <Row as=\"tr\" className=\"text-center m-0 p-0 text-primary\">\n                        <Col as=\"th\" xs={5} lg={6}>{t(\"Trip\")}</Col>\n                        <Col as=\"th\" \n                            xs={{span: 3, order: \"first\"}} \n                            lg={{span:1, order: 0}} \n                            xl={2}\n                        >\n                            {t(\"Date\")}\n                        </Col>\n                        <Col as=\"th\" xs={2} lg={3}>{t(\"Hour\")}</Col>\n                        <Col as=\"th\" xs={2} xl={1}>{t(\"Book\")}</Col>\n                    </Row>\n                </thead>\n                <tbody>\n                    {\n                        tripsList.map(\n                            trip => <TripData key={trip.id} trip={trip} />\n                        )\n                    }\n                </tbody>\n            </Table>\n        )\n    )\n}","import { FC, ReactElement } from \"react\"\nimport Container from \"react-bootstrap/Container\"\nimport { Button } from \"../atoms/Button\"\n\nexport const ButtonsRibbon: FC = (): ReactElement => (\n    <Container \n        style={{height: 75}} \n        className=\"d-flex flex-row justify-content-center gap-3 mt-3\"\n    >\n        <Button sortTable sortBy=\"date\"/>\n        <Button sortTable sortBy=\"stop\"/>\n        <Button resetCache/>\n        <Button fetchAll/>\n    </Container>\n)","import { FC, ReactElement } from \"react\"\nimport { StopSelector } from \"../molecules/StopSelector\"\nimport { BookedList } from \"../organisms/BookedList\"\nimport { Trips } from \"../organisms/Trips\"\nimport { Text } from \"../atoms/Text\"\n// import GLOBALS from \"../../_config/globals\"\nimport { useTranslation } from \"react-i18next\"\n\nimport { ButtonsRibbon } from \"../organisms/ButtonsRibbon\"\nimport Container from \"react-bootstrap/Container\"\nimport Col from \"react-bootstrap/Col\"\n\nexport const PageLayout: FC = (): ReactElement => {\n    const  { t } = useTranslation()\n    return (\n        <Container \n            as=\"main\"\n            className=\"d-flex flex-row flex-wrap bg-light min-vh-100 p-0\" \n            fluid \n        >\n            <Col \n                xs={12} \n                md={4} \n                xl={3} \n                className=\"h-lg-100 py-5 px-sm-2 d-flex flex-column bg-warning\"\n            >\n                <StopSelector />\n                <ButtonsRibbon />\n                <BookedList />\n            </Col>\n            <Col \n                xs={12} \n                md={8} \n                xl={9} \n                className=\"px-md-2 px-lg-2 px-xl-5 my-5\"\n            >\n                <Text xxl bold centered blue>\n                    {t(\"Available trips list\")}\n                </Text>\n                <Trips />\n            </Col>\n        </Container>\n    )\n}","import \"./normalize.css\"\nimport \"./styles.scss\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { PageLayout } from \"../components/templates/PageLayout\"\n\nexport const App = () => (\n\t<PageLayout />\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider as ReduxProvider } from \"react-redux\"\nimport \"./_config/locales/i18n\"\nimport { App } from \"./App\"\nimport { store } from \"./services/store\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<ReduxProvider store={store}>\n\t\t\t<App />\n\t\t</ReduxProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}